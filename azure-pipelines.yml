trigger:
      - main

stages:
- stage: ProvisionInfra
  displayName: "Provision Azure Infra with Terraform"
  jobs:
  - job: Terraform
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
      displayName: 'Installing Terraform'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'lucky-spn-connec'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          cd infra
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
      displayName: 'provisioning Infra'

# # 2. BUILD & PUBLISH
# - stage: BuildApp
#   displayName: "Build and Publish ASP.NET App"
#   dependsOn: ProvisionInfra
#   jobs:
#   - job: Build
#     pool:
#       vmImage: 'windows-latest'
#     steps:
#     - task: UseDotNet@2
#       inputs:
#         packageType: 'sdk'
#         version: '8.x.x' # or your required version

#     - task: DotNetCoreCLI@2
#       inputs:
#         command: 'restore'
#         projects: '**/*.csproj'

#     - task: DotNetCoreCLI@2
#       inputs:
#         command: 'build'
#         projects: '**/*.csproj'

#     - task: DotNetCoreCLI@2
#       inputs:
#         command: 'publish'
#         publishWebProjects: true
#         arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
#         zipAfterPublish: true

#     - publish: $(Build.ArtifactStagingDirectory)
#       artifact: drop

# # 3. DEPLOY
# - stage: DeployApp
#   displayName: "Deploy to Azure App Service"
#   dependsOn: BuildApp
#   jobs:
#   - job: Deploy
#     pool:
#       vmImage: 'windows-latest'
#     steps:
#     - download: current
#       artifact: drop

#     - task: AzureWebApp@1
#       inputs:
#         azureSubscription: 'YOUR-AZURE-SERVICE-CONNECTION'
#         appType: 'webApp'
#         appName: '$(APP_SERVICE_NAME)' # Output from Terraform
#         package: '$(Pipeline.Workspace)/drop/**/*.zip'
